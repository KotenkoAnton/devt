"use strict";

class DomElementsHandler {
  constructor(whats_up) {
    this.whats_up = whats_up;
  }

  // whole info

  open_whole_info_box(item) {
    $("#right-sidebar").addClass("sidebar-open");
    $("#whole_info_name").html(item.name);
    $("#whole_info_address").html(item.address ? item.address : "");
    $("#whole_info_ip").html(item.ip_address);
    $("#whole_info_description").html(item.description ? item.description : "");
    $("#whole_info_contacts").html(item.contacts ? item.contacts : "");

    this._set_whole_info_box_events(item);
  }

  _set_whole_info_box_events(item) {
    $("#close_whole_info_button")
      .unbind("click")
      .click(() => {
        set_whole_info_to_default();
        $("#right-sidebar").removeClass("sidebar-open");
      });
    // Open close right sidebar, from inspinia.js
    $(".right-sidebar-toggle")
      .unbind("click")
      .on("click", function() {
        set_whole_info_to_default();
        $("#right-sidebar").removeClass("sidebar-open");
      });

    $("#edit_device_button")
      .unbind("click")
      .click(() => {
        ["whole_info_name", "whole_info_ip", "whole_info_address"].forEach(
          field => {
            $(`#${field}`).css("display", "none");
            $(`#${field}`).after(
              `<input type="text" id="${field}_input" class="form-control"></input>`
            );
            $(`#${field}_input`).val($(`#${field}`).text());
          }
        );

        ["whole_info_description", "whole_info_contacts"].forEach(field => {
          $(`#${field}`).attr("contenteditable", "true");
          $(`#${field}`).addClass("form-control");
          $(`#${field}`).addClass("editing");
        });

        $("#edit_device_button").css("display", "none");
        $("#save_changes_button").css("display", "inline");
      });

    const set_whole_info_to_default = () => {
      ["whole_info_name", "whole_info_ip", "whole_info_address"].forEach(
        field => {
          $(`#${field}`).css("display", "block");
          $(`#${field}`).text($(`#${field}_input`).val());
          $(`#${field}_input`).remove();
        }
      );

      ["whole_info_description", "whole_info_contacts"].forEach(field => {
        $(`#${field}`).attr("contenteditable", "false");
        $(`#${field}`).removeClass("form-control");
        $(`#${field}`).removeClass("editing");
      });

      $("#edit_device_button").css("display", "inline");
      $("#save_changes_button").css("display", "none");
    };

    $("#save_changes_button")
      .unbind("click")
      .click(() => {
        this.whats_up.api_communicator.change_device_info(
          item.id,
          {
            description: $("#whole_info_description").html(),
            address: $("#whole_info_address_input").val(),
            contacts: $("#whole_info_contacts").html(),
            ip_address: $("#whole_info_ip_input")
              .val()
              .trim(),
            name: $("#whole_info_name_input").val()
          },
          data => {
            set_whole_info_to_default();

            const items = whats_up.drawer.get_items();
            const drawed_item_index = items.findIndex(
              _item => _item._id == item.id
            );
            let drawed_item = items[drawed_item_index];

            // change icon if availability has changed
            if (drawed_item.status != data.icmp_available) {
              let icon_final_type = get_icon_final_type({
                placeable_type: "Device",
                placeable: {
                  host_type_name: drawed_item._icon_type,
                  ip_address: {
                    icmp_available: data.icmp_available,
                    changed_status_at: data.changed_status_at
                  }
                }
              });
              let icon = get_icon(icon_final_type);
              let _item = paper.project.importSVG(icon);
              _item.icon_final_type = icon_final_type;
              _item._id = drawed_item._id;
              _item.position = drawed_item.position;
              _item.status = data.icmp_available;
              _item._icon_type = drawed_item._icon_type;
              _item._type = drawed_item._type;
              _item.text = drawed_item.text;
              _item.text_content = drawed_item.text_content;
              _item.rect = drawed_item.rect;
              drawed_item.remove();
              items[drawed_item_index] = _item;
            }

            // change item text
            drawed_item.text_content = $("#whole_info_name").html();
            drawed_item.text.content = drawed_item.text_content;

            // change status in the info box
            if ($("#info_box_status")) {
              $("#info_box_status").html(
                `${data.icmp_available ? "Active" : "Not active"}`
              );
              $("#info_box_status").removeClass(
                `${data.icmp_available ? "red-status" : "green-status"}`
              );
              $("#info_box_status").addClass(
                `${data.icmp_available ? "green-status" : "red-status"}`
              );
            }

            // change ip in the info box
            $("#info_box_ip_address").html($("#whole_info_ip").html());

            // change name in the info box
            $("#info_box_name").html($("#whole_info_name").html());
          }
        );
      });

    $("#whole_box_delete_button")
      .unbind("click")
      .click(() => {
        this.open_confirm_deleting_box(item);
      });
  }

  //

  // info box

  open_item_box(item, item_data) {
    const actual_item_position_y =
      item.position.y - $("#canvas_wrapper").scrollTop();
    const info_box_y_arrow_position =
      $("#canvas_wrapper").height() - actual_item_position_y > 350
        ? "up"
        : "down";
    const actual_item_position_x =
      item.position.x - $("#canvas_wrapper").scrollLeft();
    let info_box_x_arrow_position =
      $("#canvas_wrapper").width() - actual_item_position_x > 330
        ? "left"
        : "right";
    let logs = "";
    item_data.logs.forEach(log => {
      logs += `<div class='info-label'>${log.date} ${log.status}</div>`;
    });
    let info_box_html = `
      <div id='info_box' class='info-box info-box-${info_box_y_arrow_position}-${info_box_x_arrow_position}-arrow container'>
        <div class='item-name' id="info_box_name">${item_data.name}</div>
        <hr class='info-box-delimiter'>
        <div class="info-row">
          <div class='info-label'>Hostname:</div>
          <div class='info-text'>${item_data.host_name}</div>
        </div>
        <div class="info-row">
          <div class='info-label'>Address:</div>
          <div class='info-text info-box-ip-address'>
            <span id="info_box_ip_address">${item_data.ip_address}</span>
            <i class="fa fa-copy" id="info_box_copy_ip_button"></i>
          </div>
        </div>
        <div class="info-row">
          <div class='info-label'>${
            item_data.status ? "Up" : "Down"
          } since:</div>
          <div class='info-text'>${item_data.changed_status_at}</div>
        </div>
        <div class="info-row">
          <div class='info-label'>Responded:</div>
          <div class='info-text'>98.13%</div>
        </div>
        <div class="info-row">
          <div class='info-label'>Status:</div>
          <div id="info_box_status" class='info-text ${
            item_data.status ? "green-status" : "red-status"
          }'>${item_data.status ? "Active" : "Not active"}</div>
        </div>
        <hr class='info-box-delimiter'>
        ${logs}
        <div id="info_box_open_button" class='open-button'>
          <div class='open-button-text'>Открыть</div>
        </div>
        <div id="info_box_unlink_button" class='unlink-button'>
          <img src="<%= asset_path('unlink_button.svg') %>">
        </div>
        <div id="info_box_copy_button" class='copy-button'>
          <img src="<%= asset_path('copy_button.svg') %>">
        </div>
      </div>
    `;
    $("#canvas").after(info_box_html);
    $("#info_box").css({
      top: item.position.y - (info_box_y_arrow_position == "up" ? 65 : 327),
      left: item.position.x + (info_box_x_arrow_position == "right" ? -340 : 35)
    });

    this._set_item_box_events(item_data);
  }

  close_item_box() {
    $("#info_box").remove();
  }

  open_confirm_deleting_box(item) {
    $("#confirm_deleting_box").css("display", "block");
    $("#confirm_box_device_name").html(`${item.name} (${item.ip_address})`);
    $("#confirm_box_delete_button")
      .unbind("click")
      .click(() => {
        this.whats_up.api_communicator.delete_device_by_item_id(item.id, () => {
          location.reload();
        });
      });
  }

  _set_item_box_events(item_data) {
    $("#info_box_copy_ip_button").click(() => {
      this.whats_up.copy_to_clipboard($("#info_box_ip_address").html());
    });
    $("#info_box_ip_address").click(() => {
      window.open(`http://${$("#info_box_ip_address").html()}/`, "_blank");
    });
    $("#info_box_open_button").click(() => {
      $("#whole_info_box").remove(); // remove info box if opened
      this.open_whole_info_box(item_data);
    });
    $("#info_box_unlink_button").click(() => {
      this.whats_up.api_communicator.delete_connections_by_item_id(
        item_data.id,
        () => {
          location.reload();
        }
      );
    });
    $("#info_box_copy_button").click(() => {
      if ($("body").css("cursor") == "crosshair") {
        this.whats_up.mouse_event_handler.switch_clickable_mode_to(
          "main_usage"
        );
        this.whats_up.mouse_event_handler.set_adding_object(null);
      } else {
        this.whats_up.api_communicator.fetch_device_copy(item_data.id, data => {
          this.whats_up.mouse_event_handler.switch_clickable_mode_to(
            "adding_object"
          );
          this.whats_up.mouse_event_handler.set_adding_object({
            placeable: {
              host_type_name: data.host_type_name,
              ip_address: { icmp_available: true }
            },
            placeable_type: "Device",
            name: data.display_name,
            text_content: data.display_name,
            address: data.address,
            contacts: data.contacts,
            description: data.description
          });
        });
      }
    });
  }

  //

  // action box

  _action_box_content(content_type, items) {
    switch (content_type) {
      case "link": {
        return this._ruler_content(items, "link");
      }
      case "unlink": {
        return this._ruler_content(items, "unlink");
      }
      case "add_object": {
        return this._add_object_content();
      }
      case "add_object inscription":
      case "add_object workstation":
      case "add_object camera":
      case "add_object L3":
      case "add_object switch":
      case "add_object shapes":
      case "add_object maps":
      case "add_object zones":
      case "add_object routers":
      case "add_object radio":
      case "add_object office": {
        return this._add_objects_items_content(content_type);
      }
    }
  }

  _action_box_title(content_type) {
    switch (content_type) {
      case "link": {
        return "Создание связности объектов";
      }
      case "unlink": {
        return "Удаление связности объектов";
      }
      case "add_object": {
        return "Добавление объектов";
      }
    }
  }

  _reset_action_box(content_type) {
    this._clear_action_box();
    this._fill_action_box(this._action_box_content(content_type));
    this._set_action_box_events(content_type);

    if (content_type == "add_object zones") {
      // if adding zones, load maps and set events
      this._set_adding_zones();
    }
  }

  _clear_action_box() {
    $("#action_box_content_wrapper").empty();
  }

  _fill_action_box(content) {
    $("#action_box_content_wrapper").html(content);
  }

  _set_action_box_events(content_type, items = null) {
    switch (content_type) {
      case "link": {
        $("#save_connection_button").click(() => {
          this.whats_up.api_communicator.create_connection(
            this.whats_up.map_name,
            items.first_item,
            items.second_item,
            () => {
              document.location.reload();
            }
          );
        });
        break;
      }
      case "unlink": {
        $("#unlink_connection_button").click(() => {
          this.whats_up.api_communicator.delete_connection(
            this.whats_up.map_name,
            items.first_item,
            items.second_item,
            () => {
              document.location.reload();
            }
          );
        });
        break;
      }
      case "add_object": {
        $(".add-item").click(event => {
          let text = event.currentTarget.children[1].firstChild.textContent;
          this._handle_object_type_selection(text);
        });
        break;
      }
      case "add_object workstation": {
        $(".item").click(event => {
          set_adding("Workstation");
        });
        break;
      }
      case "add_object camera": {
        $(".item").click(event => {
          set_adding("Camera");
        });
        break;
      }
      case "add_object switch": {
        $(".item").click(event => {
          set_adding("Switch");
        });
        break;
      }
      case "add_object radio": {
        $(".item").click(event => {
          set_adding("Radio");
        });
        break;
      }
      case "add_object office": {
        $(".item").click(event => {
          let names_map = {
            Принтер: "Printer",
            Сканер: "Scanner",
            Факс: "Fax"
          };
          let text = event.currentTarget.children[1].firstChild.textContent;
          set_adding(names_map[text]);
        });
        break;
      }
      case "add_object routers": {
        $(".item").click(event => {
          set_adding("Router");
        });
        break;
      }
      case "add_object L3": {
        $(".item").click(event => {
          set_adding("L3");
        });
        break;
      }
      case "add_object zones": {
        $("#add_zone_button").click(() => {
          this.whats_up.mouse_event_handler.switch_clickable_mode_to(
            "adding_object"
          );
          let zone_name = $("#zone_name").val();
          let zone_map_name = $("a.list-group-item-action.active").text();
          this.whats_up.mouse_event_handler.set_adding_object({
            placeable_type: "Map",
            name: zone_name,
            destination_map_name: zone_map_name
          });
        });
      }
      case "add_object maps": {
        $("#add_map_button").click(() => {
          this.whats_up.api_communicator.add_new_map(
            $("#new_map_name").val(),
            data => {
              if (data.added) {
                $("#new_map_name").val("");
                $("#new_map_info_label").html("Карта добавлена");
                $("#new_map_info_label").css({
                  display: "block",
                  color: "green"
                });
              } else {
                $("#new_map_info_label").html("Карта не добавлена");
                $("#new_map_info_label").css({
                  display: "block",
                  color: "red"
                });
              }
            }
          );
        });
        break;
      }
      case "add_object shapes": {
        $("#rectangle").click(() => {
          this.whats_up.mouse_event_handler.switch_clickable_mode_to(
            "adding_object"
          );
          this.whats_up.mouse_event_handler.set_adding_object({
            placeable_type: "Shape",
            shape_type: "Rectangle"
          });
        });
      }
      case "add_object inscription": {
        $("#add_new_inscription_button").click(() => {
          this.whats_up.mouse_event_handler.switch_clickable_mode_to(
            "adding_object"
          );
          this.whats_up.mouse_event_handler.set_adding_object({
            placeable_type: "Inscription",
            font_size: 13,
            font_color: "black",
            content: $("#new_inscription_input").val()
          });
        });
      }
    }

    let set_adding = host_type_name => {
      this.whats_up.mouse_event_handler.switch_clickable_mode_to(
        "adding_object"
      );
      this.whats_up.mouse_event_handler.set_adding_object({
        placeable: { host_type_name, ip_address: { icmp_available: true } },
        placeable_type: "Device",
        name: "New Router",
        text_content: "New Router"
      });
    };
  }

  open_action_box(content_type, items = null) {
    $("#action_box").remove();
    if (content_type == "link" || content_type == "unlink") {
      $("#ruler_img").prop("src", "<%= asset_path('ruler.svg') %>");
    }
    let action_box_html = `
      <div id='action_box' class='action-box'>
        <div class='title'>
          ${this._action_box_title(content_type)}
        </div>
        <div id='action_box_close_button' class='close-button'>
          <img src="<%= asset_path('close_button.svg') %>">
        </div>
        <br><br>
        <div id="action_box_content_wrapper" class="action-box-content-wrapper">
          ${this._action_box_content(content_type, items)}
        </div>
      </div>
    `;

    $("#canvas").after(action_box_html);
    $("#action_box_close_button").click(() => {
      this.whats_up.mouse_event_handler.switch_clickable_mode_to("main_usage");
      this.whats_up.mouse_event_handler.set_adding_object(null);
      $("#action_box").remove();
    });
    this._set_action_box_events(content_type, items);
  }

  //

  // adding item in action box

  _set_adding_zones() {
    $("#action_box_content_wrapper")
      .promise()
      .done(() => {
        this.whats_up.api_communicator.fetch_all_maps_names(data => {
          let maps = data.maps;
          let html =
            "<input id='map_name_search_box' class='map-name-search-box' placeholder='Поиск по названию'>";
          maps.forEach(map => {
            html += `<a class="list-group-item list-group-item-action">${map}</a>`;
          });
          $("#map_selecting_list_group").html(html);
          $("#map_name_search_box").keyup(() => {
            let filter = $("#map_name_search_box")
              .val()
              .toLowerCase();
            $("#map_selecting_list_group a").each((_, map_name) => {
              if (map_name.text.toLowerCase().includes(filter)) {
                $(map_name).show();
              } else {
                $(map_name).hide();
              }
            });
          });
          $("#map_selecting_list_group a").click(e => {
            $("#map_selecting_list_group a.active").removeClass("active");
            $(e.target).addClass("active");
          });
        });
      });
  }

  _add_object_content() {
    return `
      <div class="adding-wrapper">
        <div class="add-item">
          <img src="<%= asset_path('radio.svg') %>" class="object-type-img uncentered-img">
          <span class="uncentered-text">Радио<span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('hub.svg') %>" class="object-type-img">
          <span>Свичи</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('L3.svg') %>" class="object-type-img">
          <span>L3-устройства</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('router.svg') %>" class="object-type-img">
          <span>Роутеры</span>
        </div>
        <div class="add-item with-no-right-margin">
          <img src="<%= asset_path('camera.svg') %>" class="object-type-img">
          <span>Камеры</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('battery.svg') %>" class="object-type-img uncentered-img">
          <span>Оповещалки</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('desktop.svg') %>" class="object-type-img">
          <span>Компьютеры</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('network.svg') %>" class="object-type-img">
          <span>Конвертеры</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('molecular.svg') %>" class="object-type-img">
          <span>Соединения</span>
        </div>
        <div class="add-item with-no-right-margin">
          <img src="<%= asset_path('frame.svg') %>" class="object-type-img">
          <span>Рамки</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('figures.svg') %>" class="object-type-img">
          <span>Фигуры</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('radio.svg') %>" class="object-type-img uncentered-img">
          <span>Надписи</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('printer.svg') %>" class="object-type-img uncentered-img">
          <span>Офис</span>
        </div>
        <div class="add-item with-no-right-margin">
          <img src="<%= asset_path('cloud.svg') %>" class="object-type-img">
          <span>Зоны</span>
        </div>
        <div class="add-item">
          <img src="<%= asset_path('radio.svg') %>" class="object-type-img uncentered-img">
          <span class="uncentered-text">Карты<span>
        </div>
      </div>
    `;
  }

  _add_objects_items_content(type) {
    let items = [];
    let html = '<div class="adding-wrapper">';
    let breadcrumb;
    switch (type) {
      case "add_object radio": {
        breadcrumb = "Радио";
        items = [
          {
            label: "Infinet R200",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R500",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R2000",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R3000",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H02",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H05-5.3",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H05-2.4",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H05-6.3",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-Ho7-2.4",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H07-6.3",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H07-5.3",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H08",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infinet R5000-H11",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infilink XG-5",
            img_src: "<%= asset_path('rectangle.svg') %>"
          },
          {
            label: "Infilink XG-6",
            img_src: "<%= asset_path('rectangle.svg') %>"
          }
        ];
        break;
      }
      case "add_object switch": {
        breadcrumb = "Свичи";
        items = [
          {
            label: "D-link DES 1005",
            img_src: "<%= asset_path('switch.svg') %>"
          }
        ];
        break;
      }
      case "add_object office": {
        breadcrumb = "Офис";
        items = [
          { label: "Принтер", img_src: "<%= asset_path('printer.svg') %>" },
          { label: "Сканер", img_src: "<%= asset_path('scanner.svg') %>" },
          { label: "Факс", img_src: "<%= asset_path('fax.svg') %>" }
        ];
        break;
      }
      case "add_object workstation": {
        breadcrumb = "Компьютеры";
        items = [
          { label: "Компьютер", img_src: "<%= asset_path('desktop.svg') %>" }
        ];
        break;
      }
      case "add_object routers": {
        breadcrumb = "Роутеры";
        items = [
          { label: "SNR-CPE-W4N", img_src: "<%= asset_path('modem.svg') %>" },
          { label: "Другой роутер", img_src: "<%= asset_path('router.svg') %>" }
        ];
        break;
      }
      case "add_object camera": {
        breadcrumb = "Камеры";
        items = [
          { label: "Камера", img_src: "<%= asset_path('camera.svg') %>" }
        ];
        break;
      }
      case "add_object zones": {
        breadcrumb = "Зоны";

        html += `
          <div class="item">
            <img src="<%= asset_path('cloud.svg') %>">
            <input id="zone_name" placeholder="Имя зоны" class="zone-name">
          </div>
          <div class="btn btn-success add-zone-button" id="add_zone_button">
            Добавить зону
          </div>
          <div id="map_selecting_wrapper" class="map-selecting-wrapper">
            <div id="map_selecting_list_group" class="list-group">
            </div>
          </div>
        `;
        break;
      }
      case "add_object maps": {
        breadcrumb = "Карты";

        html += `
          <input id="new_map_name" placeholder="Имя карты"><br>
          <label id="new_map_info_label" class="info-label">check</label>
          <div id="add_map_button" class="btn btn-success add-map-button">Добавить карту</div>
        `;
        break;
      }
      case "add_object shapes": {
        breadcrumb = "Фигуры";

        html += `
          <div id="rectangle" class="rectangle">
            <span>Прямоугольник</span>
          </div>
        `;
        break;
      }
      case "add_object L3": {
        breadcrumb = "L3-устройства";
        items = [
          { label: "L3-устройство", img_src: "<%= asset_path('L3.svg') %>" }
        ];
        break;
      }
      case "add_object inscription": {
        breadcrumb = "Надписи";

        html += `
          <input id="new_inscription_input" placeholder="Текст"><br><br>
          <button id="add_new_inscription_button" class="btn btn-success">Добавить текст</button>
        `;
        break;
      }
    }

    // if filling with items content
    for (let item of items) {
      html += `
        <div class="item">
          <img src=${item.img_src}>
          <span>${item.label}</span>
        </div>
      `;
    }

    html += "</div>";

    return `
      <div class="breadcrumbs">
        <span id="all_objects_button" class="all-objects">Все объекты</span><span class="current-objects"> / ${breadcrumb}</span>
      </div>
      ${html}
    `;
  }

  _handle_object_type_selection(text) {
    let prefix = "add_object";
    switch (text) {
      case "Радио": {
        this._reset_action_box(prefix + " radio");
        break;
      }
      case "Свичи": {
        this._reset_action_box(prefix + " switch");
        break;
      }
      case "Офис": {
        this._reset_action_box(prefix + " office");
        break;
      }
      case "Роутеры": {
        this._reset_action_box(prefix + " routers");
        break;
      }
      case "Зоны": {
        this._reset_action_box(prefix + " zones");
        break;
      }
      case "Карты": {
        this._reset_action_box(prefix + " maps");
        break;
      }
      case "Фигуры": {
        this._reset_action_box(prefix + " shapes");
        break;
      }
      case "L3-устройства": {
        this._reset_action_box(prefix + " L3");
        break;
      }
      case "Камеры": {
        this._reset_action_box(prefix + " camera");
        break;
      }
      case "Компьютеры": {
        this._reset_action_box(prefix + " workstation");
        break;
      }
      case "Надписи": {
        this._reset_action_box(prefix + " inscription");
        break;
      }
    }
    $("#all_objects_button").click(() => {
      this._reset_action_box("add_object");
    });
  }

  //

  // ruler in action box

  _ruler_content(items, action) {
    return `
    <div class="ruler-wrapper">
      <div class="items-row">
        <div class="item first-item">
          <span class="item-img">
            ${get_icon(items.first_item.icon_final_type)}
          </span>
          <label class="item-label">
            ${
              items.first_item.text_content
                ? items.first_item.text_content
                : "Фигура"
            }
          </label>
        </div>
        <div class="item second-item">
          <span class="item-img">
            ${get_icon(items.second_item.icon_final_type)}
          </span>
          <label class="item-label">
            ${
              items.second_item.text_content
                ? items.second_item.text_content
                : "Фигура"
            }
          </label>
        </div>
        <div class="connection-line"></div>
      </div>

      <div class="buttons-wrapper">
        <div id="unlink_connection_button" class="btn btn-danger button ${
          action == "link" ? "hidden" : ""
        }">Удалить связь</div>
        <div id="save_connection_button" class="btn btn-success button ${
          action == "unlink" ? "hidden" : ""
        }">Сохранить</div>
      </div>
    </div>
    `;
  }

  //
}
